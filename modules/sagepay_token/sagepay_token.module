<?php

/**
 * @file
 * sagepay_token.module
 */

module_load_include('inc', 'commerce_sagepay', 'includes/commerce_sagepay_constants');

/**
 * Implements hook_form_commerce_sagepay_settings_form_alter().
 */
function sagepay_token_form_commerce_sagepay_settings_form_alter(&$form, &$form_state, $form_id) {

  // Add support for Tokens.
  $form['tokens'] = array(
    '#type' => 'fieldset',
    '#title' => t('Token'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['tokens'][SAGEPAY_SETTING_REQUEST_TOKEN] = array(
    '#type' => 'checkbox',
    '#title' => t('Request a token by default when a transaction is created.'),
    '#description' => t('This behaviour can be changed on a per-order basis using <code>hook_sagepay_order_data_alter</code>.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#default_value' => variable_get(SAGEPAY_SETTING_REQUEST_TOKEN, 0),
  );
}

/**
 * Implements hook_sagepay_order_data_alter().
 *
 * Adds the create token parameter to the order data.
 */
function sagepay_token_sagepay_order_data_alter(&$query) {

  switch ($query['integration_method']) {
    case SAGEPAY_SERVER:
      $query['CreateToken'] = variable_get(SAGEPAY_SETTING_REQUEST_TOKEN, 0);
      break;

    case SAGEPAY_DIRECT:
      $query['CreateToken'] = variable_get(SAGEPAY_SETTING_REQUEST_TOKEN, 0);
      break;
  }
}

/**
 * Implements hook_commerce_payment_method_info_alter().
 *
 * Adds card on file support to direct payment method.
 */
function sagepay_token_commerce_payment_method_info_alter(&$payment_methods) {
  if (array_key_exists('commerce_sagepay_direct', $payment_methods)) {
    $payment_methods['commerce_sagepay_direct']['cardonfile'] = array(
      'update callback' => 'sagepay_token_cardonfile_update',
      'delete callback' => 'sagepay_token_cardonfile_delete',
    );
  }
}

/**
 * Implement suport for Commerce Card on File.
 *
 * @param commerce_payment_transaction $transaction
 *  The transaction about to be saved.
 *
 * @return bool
 *  Return TRUE if the transaction is modified ok.
 *  Return FALSE if the transaction does not contain a token in the payload.
 */
function sagepay_token_commerce_payment_transaction_presave($transaction) {

  // Check if transaction payload contains a token.
  if (!isset($transaction->payload['Token'])) {
    return FALSE;
  }

  if (!isset($transaction->payload['cardonfile_store']) ||
    $transaction->payload['cardonfile_store'] == 0) {
    return FALSE;
  }

  global $user;

  $card_data = array(
    'uid' => $user->uid,
    'payment_method' => $transaction->payment_method,
    'instance_id' => $transaction->instance_id,
    'remote_id' => $transaction->payload['Token'],
    'card_type' => $transaction->payload['CardType'],
    'card_number' => $transaction->payload['Last4Digits'],
    'card_exp_month' => $transaction->payload['ExpMonth'],
    'card_exp_year' => $transaction->payload['ExpYear'],
    'status' => '1',
  );
  commerce_cardonfile_data_save($card_data);
  return TRUE;
}

/**
 * Implements hook_cardonfile_update().
 */
function sagepay_token_cardonfile_update($form, $form_state, $payment_method, $card_data) {
  return TRUE;
}

/**
 * Implements hook_cardonfile_delete().
 */
function sagepay_token_cardonfile_delete($form, $form_state, $payment_method, $card_data) {
  //@todo This doesn't work at the moment. SagePay is rejecting the request although it seems valid.
  watchdog('sagepay', 'received request to remove token');

  $query = array();
  $query['VPSProtocol'] = SAGEPAY_PROTOCOL;
  $query['TxType'] = 'REMOVETOKEN';
  $query['Vendor'] = variable_get(SAGEPAY_SETTING_VENDOR_NAME);
  $query['Token'] = $card_data['remote_id'];

  switch (variable_get(SAGEPAY_SETTING_TRANSACTION_MODE)) {
    case SAGEPAY_TXN_MODE_LIVE:
      $url = SAGEPAY_TOKEN_REMOVE_LIVE;
      break;
    case SAGEPAY_TXN_MODE_TEST:
      $url = SAGEPAY_TOKEN_REMOVE_TEST;
      break;
  }
  $response = _commerce_sagepay_request_post($url, $query);

  switch ($response['Status']) {
    case 'OK':
      return TRUE;
    case 'MALFORMED':
    case 'INVALID' :
      drupal_set_message(t('Error removing saved card. %detail', array('%detail' => $response['StatusDetail'])));
      return FALSE;
  }

  return TRUE;

}

function sagepay_token_cardonfile_charge() {
  //@todo implement

}
